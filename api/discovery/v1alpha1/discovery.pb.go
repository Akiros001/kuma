// Code generated by protoc-gen-go. DO NOT EDIT.
// source: discovery/v1alpha1/discovery.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// List of Services and non-service Workloads that should be included into a
// mesh.
//
// Service is a logical network service provided collectively by multiple
// application instances.
//
// Workload is an arbitrary application instance that can either be a part of a
// Service or not. E.g., batch jobs, cron jobs, stream processing pipelines are
// all examples of workloads that, generally, are not a part of a Service but
// still need to be included into a mesh (where they act purely as clients).
type Inventory struct {
	// List of Services and non-service Workloads.
	Items                []*Inventory_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Inventory) Reset()         { *m = Inventory{} }
func (m *Inventory) String() string { return proto.CompactTextString(m) }
func (*Inventory) ProtoMessage()    {}
func (*Inventory) Descriptor() ([]byte, []int) {
	return fileDescriptor_555538d6a43833fa, []int{0}
}

func (m *Inventory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Inventory.Unmarshal(m, b)
}
func (m *Inventory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Inventory.Marshal(b, m, deterministic)
}
func (m *Inventory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inventory.Merge(m, src)
}
func (m *Inventory) XXX_Size() int {
	return xxx_messageInfo_Inventory.Size(m)
}
func (m *Inventory) XXX_DiscardUnknown() {
	xxx_messageInfo_Inventory.DiscardUnknown(m)
}

var xxx_messageInfo_Inventory proto.InternalMessageInfo

func (m *Inventory) GetItems() []*Inventory_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type Inventory_Item struct {
	// Types that are valid to be assigned to ItemType:
	//	*Inventory_Item_Service
	//	*Inventory_Item_Workload
	ItemType             isInventory_Item_ItemType `protobuf_oneof:"item_type"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Inventory_Item) Reset()         { *m = Inventory_Item{} }
func (m *Inventory_Item) String() string { return proto.CompactTextString(m) }
func (*Inventory_Item) ProtoMessage()    {}
func (*Inventory_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_555538d6a43833fa, []int{0, 0}
}

func (m *Inventory_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Inventory_Item.Unmarshal(m, b)
}
func (m *Inventory_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Inventory_Item.Marshal(b, m, deterministic)
}
func (m *Inventory_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inventory_Item.Merge(m, src)
}
func (m *Inventory_Item) XXX_Size() int {
	return xxx_messageInfo_Inventory_Item.Size(m)
}
func (m *Inventory_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Inventory_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Inventory_Item proto.InternalMessageInfo

type isInventory_Item_ItemType interface {
	isInventory_Item_ItemType()
}

type Inventory_Item_Service struct {
	Service *Service `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

type Inventory_Item_Workload struct {
	Workload *Workload `protobuf:"bytes,2,opt,name=workload,proto3,oneof"`
}

func (*Inventory_Item_Service) isInventory_Item_ItemType() {}

func (*Inventory_Item_Workload) isInventory_Item_ItemType() {}

func (m *Inventory_Item) GetItemType() isInventory_Item_ItemType {
	if m != nil {
		return m.ItemType
	}
	return nil
}

func (m *Inventory_Item) GetService() *Service {
	if x, ok := m.GetItemType().(*Inventory_Item_Service); ok {
		return x.Service
	}
	return nil
}

func (m *Inventory_Item) GetWorkload() *Workload {
	if x, ok := m.GetItemType().(*Inventory_Item_Workload); ok {
		return x.Workload
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Inventory_Item) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Inventory_Item_Service)(nil),
		(*Inventory_Item_Workload)(nil),
	}
}

// Logical network service provided collectively by multiple application
// instances.
type Service struct {
	// Id of a service within a mesh.
	//
	// Even if the original service registry doesn't have a notion of namespaces
	// (compartments), within a mesh every service belongs to a namespace.
	// When the namespace is omitted the implicit default namespace will be
	// assumed.
	Id *Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// List of endpoints providing this service.
	Endpoints            []*Endpoint `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_555538d6a43833fa, []int{1}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetId() *Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Service) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

// Endpoint describes a destination for network traffic in a mesh.
type Endpoint struct {
	// Workload that will receive traffic.
	Workload *Workload `protobuf:"bytes,1,opt,name=workload,proto3" json:"workload,omitempty"`
	// Address on which the workload is listening for traffic.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Port on which the workload is listening for traffic.
	Port                 uint32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Endpoint) Reset()         { *m = Endpoint{} }
func (m *Endpoint) String() string { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()    {}
func (*Endpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_555538d6a43833fa, []int{2}
}

func (m *Endpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Endpoint.Unmarshal(m, b)
}
func (m *Endpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Endpoint.Marshal(b, m, deterministic)
}
func (m *Endpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endpoint.Merge(m, src)
}
func (m *Endpoint) XXX_Size() int {
	return xxx_messageInfo_Endpoint.Size(m)
}
func (m *Endpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Endpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Endpoint proto.InternalMessageInfo

func (m *Endpoint) GetWorkload() *Workload {
	if m != nil {
		return m.Workload
	}
	return nil
}

func (m *Endpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Endpoint) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// Workload describes an application instance that can be either a source of
// network traffic, or a destination for it or both.
type Workload struct {
	// Id of a workload within a mesh.
	//
	// Even if the original service registry doesn't have a notion of namespaces
	// (compartments), within a mesh every workload belongs to a namespace.
	// When the namespace is omitted the implicit default namespace will be
	// assumed.
	Id *Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional information about a workload that powers traffic policies
	// (i.e. access control rules), subset load balancing (i.e. canary
	// releases), etc.
	// In practice, each workload should have at least one label for grouping
	// by application it represents, i.e. `app=gmail` or `job=daily-report`.
	// To enable canary releases, grouping by version might be useful, i.e.
	// `version=1.2.3`.
	// Usage of such labels allows to define traffic policies in terms of
	// applications, their versions and other traits.
	Meta *Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// Locality of a workload for the purposes of zone aware routing (i.e.
	// multi-datacenter routing).
	Locality             *Locality `protobuf:"bytes,3,opt,name=locality,proto3" json:"locality,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Workload) Reset()         { *m = Workload{} }
func (m *Workload) String() string { return proto.CompactTextString(m) }
func (*Workload) ProtoMessage()    {}
func (*Workload) Descriptor() ([]byte, []int) {
	return fileDescriptor_555538d6a43833fa, []int{3}
}

func (m *Workload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Workload.Unmarshal(m, b)
}
func (m *Workload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Workload.Marshal(b, m, deterministic)
}
func (m *Workload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workload.Merge(m, src)
}
func (m *Workload) XXX_Size() int {
	return xxx_messageInfo_Workload.Size(m)
}
func (m *Workload) XXX_DiscardUnknown() {
	xxx_messageInfo_Workload.DiscardUnknown(m)
}

var xxx_messageInfo_Workload proto.InternalMessageInfo

func (m *Workload) GetId() *Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Workload) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Workload) GetLocality() *Locality {
	if m != nil {
		return m.Locality
	}
	return nil
}

// Id of an entity within a mesh.
//
// Although a service registry you're integrating with might not have a notion
// of namespaces (compartments), you can still benefit from them in the context
// of a mesh.
// By assigning an entity to a namespace you can leverage of namespace-wide
// defaults, namespace-wide policies, etc.
type Id struct {
	// Namespace is a unit of compartmentalization.
	//
	// If the namespace is omitted the implicit default namespace will be
	// assumed.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name must be unique within a namespace.
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_555538d6a43833fa, []int{4}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Id) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Meta information for breaking objects into categories.
type Meta struct {
	// Key/value pairs for breaking objects into categories, e.g.
	// Kubernetes labels.
	Labels               map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_555538d6a43833fa, []int{5}
}

func (m *Meta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meta.Unmarshal(m, b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return xxx_messageInfo_Meta.Size(m)
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Locality describes location of a workload for the purposes of
// zone aware routing (i.e. multi-datacenter routing).
type Locality struct {
	// Region, i.e. cloud region.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Region, i.e. cloud zone.
	Zone                 string   `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Locality) Reset()         { *m = Locality{} }
func (m *Locality) String() string { return proto.CompactTextString(m) }
func (*Locality) ProtoMessage()    {}
func (*Locality) Descriptor() ([]byte, []int) {
	return fileDescriptor_555538d6a43833fa, []int{6}
}

func (m *Locality) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Locality.Unmarshal(m, b)
}
func (m *Locality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Locality.Marshal(b, m, deterministic)
}
func (m *Locality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Locality.Merge(m, src)
}
func (m *Locality) XXX_Size() int {
	return xxx_messageInfo_Locality.Size(m)
}
func (m *Locality) XXX_DiscardUnknown() {
	xxx_messageInfo_Locality.DiscardUnknown(m)
}

var xxx_messageInfo_Locality proto.InternalMessageInfo

func (m *Locality) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Locality) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func init() {
	proto.RegisterType((*Inventory)(nil), "kuma.discovery.v1alpha1.Inventory")
	proto.RegisterType((*Inventory_Item)(nil), "kuma.discovery.v1alpha1.Inventory.Item")
	proto.RegisterType((*Service)(nil), "kuma.discovery.v1alpha1.Service")
	proto.RegisterType((*Endpoint)(nil), "kuma.discovery.v1alpha1.Endpoint")
	proto.RegisterType((*Workload)(nil), "kuma.discovery.v1alpha1.Workload")
	proto.RegisterType((*Id)(nil), "kuma.discovery.v1alpha1.Id")
	proto.RegisterType((*Meta)(nil), "kuma.discovery.v1alpha1.Meta")
	proto.RegisterMapType((map[string]string)(nil), "kuma.discovery.v1alpha1.Meta.LabelsEntry")
	proto.RegisterType((*Locality)(nil), "kuma.discovery.v1alpha1.Locality")
}

func init() { proto.RegisterFile("discovery/v1alpha1/discovery.proto", fileDescriptor_555538d6a43833fa) }

var fileDescriptor_555538d6a43833fa = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xd1, 0x8a, 0xd4, 0x30,
	0x18, 0x85, 0x37, 0x9d, 0xee, 0x4c, 0xfb, 0x0f, 0x82, 0x04, 0xd1, 0xb2, 0x2a, 0x8c, 0xbd, 0x71,
	0x44, 0xe8, 0x32, 0x2b, 0x2c, 0x2a, 0x2e, 0x8b, 0x0b, 0x0b, 0x3b, 0xb0, 0xde, 0xc4, 0x0b, 0xc1,
	0x1b, 0xc9, 0x4e, 0x82, 0x86, 0x69, 0x93, 0x92, 0x66, 0x3b, 0xd4, 0x6b, 0x9f, 0xc0, 0xb7, 0xf0,
	0xa9, 0x7c, 0x15, 0x49, 0x26, 0xe9, 0xec, 0x4d, 0x07, 0xf7, 0xee, 0xff, 0x0f, 0xe7, 0xa4, 0xdf,
	0x09, 0x29, 0xe4, 0x4c, 0x34, 0x2b, 0xd5, 0x72, 0xdd, 0x1d, 0xb7, 0x0b, 0x5a, 0xd6, 0x3f, 0xe8,
	0xe2, 0xb8, 0x97, 0x8a, 0x5a, 0x2b, 0xa3, 0xf0, 0x93, 0xf5, 0x6d, 0x45, 0x8b, 0x9d, 0x1a, 0x8c,
	0xf9, 0x5f, 0x04, 0xe9, 0x52, 0xb6, 0x5c, 0x1a, 0xa5, 0x3b, 0x7c, 0x06, 0x87, 0xc2, 0xf0, 0xaa,
	0xc9, 0xd0, 0x6c, 0x34, 0x9f, 0x9e, 0xbc, 0x2c, 0x06, 0x62, 0x45, 0x1f, 0x29, 0x96, 0x86, 0x57,
	0x64, 0x9b, 0x3a, 0xfa, 0x8d, 0x20, 0xb6, 0x3b, 0xfe, 0x00, 0x93, 0x86, 0xeb, 0x56, 0xac, 0x78,
	0x86, 0x66, 0x68, 0x3e, 0x3d, 0x99, 0x0d, 0x9e, 0xf4, 0x79, 0xeb, 0xbb, 0x3a, 0x20, 0x21, 0x82,
	0xcf, 0x21, 0xd9, 0x28, 0xbd, 0x2e, 0x15, 0x65, 0x59, 0xe4, 0xe2, 0x2f, 0x06, 0xe3, 0x5f, 0xbc,
	0xf1, 0xea, 0x80, 0xf4, 0xa1, 0x8b, 0x29, 0xa4, 0x16, 0xe8, 0x9b, 0xe9, 0x6a, 0x9e, 0x6f, 0x60,
	0xe2, 0xbf, 0x81, 0x5f, 0x43, 0x24, 0x98, 0x27, 0x7a, 0x3a, 0xdc, 0x8d, 0x91, 0x48, 0x30, 0x7c,
	0x0e, 0x29, 0x97, 0xac, 0x56, 0x42, 0x9a, 0x26, 0x8b, 0xdd, 0x7d, 0x0c, 0x63, 0x5c, 0x7a, 0x27,
	0xd9, 0x65, 0xf2, 0x0d, 0x24, 0x41, 0xc6, 0x67, 0x77, 0x2a, 0xa1, 0xff, 0xac, 0xb4, 0x2b, 0x84,
	0x33, 0x98, 0x50, 0xc6, 0x34, 0x6f, 0x1a, 0x77, 0x21, 0x29, 0x09, 0x2b, 0xc6, 0x10, 0xd7, 0x4a,
	0x9b, 0x6c, 0x34, 0x43, 0xf3, 0x07, 0xc4, 0xcd, 0xf9, 0x1f, 0x04, 0x49, 0x38, 0xe4, 0x7e, 0x9d,
	0x17, 0x10, 0x57, 0xdc, 0x50, 0x7f, 0xeb, 0xcf, 0x07, 0xed, 0x9f, 0xb8, 0xa1, 0xc4, 0x59, 0x6d,
	0xb3, 0x52, 0xad, 0x68, 0x29, 0x4c, 0xe7, 0x20, 0xf6, 0x35, 0xbb, 0xf6, 0x46, 0xd2, 0x47, 0xf2,
	0x53, 0x88, 0x96, 0x0c, 0x3f, 0x83, 0x54, 0xd2, 0x8a, 0x37, 0x35, 0xf5, 0x2f, 0x26, 0x25, 0x3b,
	0xc1, 0x76, 0xb4, 0x8b, 0xaf, 0xee, 0xe6, 0xfc, 0x17, 0x82, 0xd8, 0x52, 0xe0, 0x8f, 0x30, 0x2e,
	0xe9, 0x0d, 0x2f, 0xc3, 0x9b, 0x7d, 0xb5, 0x17, 0xba, 0xb8, 0x76, 0xde, 0x4b, 0x69, 0x74, 0x47,
	0x7c, 0xf0, 0xe8, 0x1d, 0x4c, 0xef, 0xc8, 0xf8, 0x21, 0x8c, 0xd6, 0xbc, 0xf3, 0x18, 0x76, 0xc4,
	0x8f, 0xe0, 0xb0, 0xa5, 0xe5, 0x6d, 0x20, 0xd8, 0x2e, 0xef, 0xa3, 0xb7, 0x28, 0x3f, 0x85, 0x24,
	0x94, 0xc2, 0x8f, 0x61, 0xac, 0xf9, 0x77, 0xa1, 0xa4, 0x8f, 0xfa, 0xcd, 0xe2, 0xff, 0x54, 0xb2,
	0xc7, 0xb7, 0xf3, 0x05, 0x7c, 0x4d, 0x02, 0xd7, 0xcd, 0xd8, 0xfd, 0xa2, 0x6f, 0xfe, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x3b, 0xee, 0x2e, 0x89, 0xc8, 0x03, 0x00, 0x00,
}
